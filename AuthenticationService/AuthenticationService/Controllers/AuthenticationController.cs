using System.Diagnostics.CodeAnalysis;
using System.Text.Json;
using Microsoft.AspNetCore.Mvc;
using Photography.Management.Suite.Core.Configurations;
using Photography.Management.Suite.Core.Contracts.Authentication;

namespace Photography.Management.Suite.AuthenticationService.Controllers;

/// <summary>
/// Class AuthenticationController. This class cannot be inherited.
/// Implements the <see cref="ControllerBase" />
/// Implements the <see cref="System.IDisposable" />
/// </summary>
/// <seealso cref="ControllerBase" />
/// <seealso cref="System.IDisposable" />
[Route("authentication")]
[ApiController]
[Produces("application/json")]
public sealed class AuthenticationController : ControllerBase, IDisposable
{
   private ILogger<AuthenticationController> logger;
   private readonly OidcConfiguration oidcConfiguration;

   /// <summary>
   /// Initializes a new instance of the <see cref="AuthenticationController"/> class.
   /// </summary>
   /// <param name="logger">The logger.</param>
   public AuthenticationController(ILogger<AuthenticationController> logger, OidcConfiguration oidcConfiguration)
   {
      this.logger = logger;
      this.oidcConfiguration = oidcConfiguration;

      if (this.logger.IsEnabled(LogLevel.Debug))
      {
         this.logger.LogDebug("AuthenticationController initialized successfully.");
      }
   }

   [HttpPost("login")]
   public async Task<IActionResult> LoginAsync([FromBody] UserCredentials userCredentials)
   {
      using var httpClient = new HttpClient();
      var request = new HttpRequestMessage(HttpMethod.Post, $"{this.oidcConfiguration.Authority}/protocol/openid-connect/token");

      var keyValues = new List<KeyValuePair<string, string>>
      {
         new("grant_type", "password"),
         new("client_id", this.oidcConfiguration.ClientId),
         new("client_secret", this.oidcConfiguration.ClientSecret),
         new("username", userCredentials.Username),
         new("password", userCredentials.Password)
      };

      request.Content = new FormUrlEncodedContent(keyValues);
      var response = await httpClient.SendAsync(request);

      if (response.IsSuccessStatusCode == false)
         return Unauthorized();

      var content = await response.Content.ReadAsStringAsync();
      var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(content);

      return Ok(tokenResponse);
   }

   #region IDisposable Interface Implementation

   private bool disposed;

   /// <summary>
   /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   /// </summary>
   /// <autogeneratedoc />
   [ExcludeFromCodeCoverage]
   public void Dispose()
   {
      this.Dispose(true);
      GC.SuppressFinalize(this);
   }

   /// <summary>
   /// Releases unmanaged and - optionally - managed resources.
   /// </summary>
   /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
   /// <autogeneratedoc />
   [ExcludeFromCodeCoverage]
   private void Dispose(bool disposing)
   {
      if (!this.disposed && disposing)
      {
         // Disposing Logic
         this.logger = null!;
      }

      this.disposed = true;
   }

   /// <summary>
   /// Finalizes an instance of the <see cref="AuthenticationController"/> class.
   /// </summary>
   /// <autogeneratedoc />
   [ExcludeFromCodeCoverage]
   ~AuthenticationController()
   {
      this.Dispose(false);
   }

   #endregion
}
